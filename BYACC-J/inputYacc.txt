%{
package compilador.parser;
import java.io.*;
import compilador.analizadorLexicografico.Automata;
import compilador.util.ArchivoReader;
%}

/* YACC Declarations */
%token ID CTE_NUM CTE_STR OP_SUMA OP_RESTA OP_MUL OP_DIV OP_ASIG AND OR OP_NEGACION OP_IGUAL OP_DISTINTO OP_MAYOR OP_MENOR	OP_MAYOR_IGUAL OP_MENOR_IGUAL PAR_ABRE PAR_CIERRA COR_ABRE COR_CIERRA COMA DOS_PUNTOS PUNTO_Y_COMA BEGIN END STRING FLOAT POINTER DEFVAR ENDDEF IF ELSE ENDIF REPEAT UNTIL TYPE AS DISPLAY AVG

/* Grammar follows */
%%
programa: def_tipos def_var ejecucion
| def_var ejecucion
| ejecucion
;                

def_tipos: def_tipo
| def_tipos def_tipo
;
                
def_tipo: TYPE ID AS lista PUNTO_Y_COMA
;

lista: lista_num
| lista_str
;                

lista_num: COR_ABRE lis_num_c COR_CIERRA
;

lis_num_c: CTE_NUM
| lis_num_c COMA CTE_NUM
;                

lista_str: COR_ABRE lis_str_c COR_CIERRA
;

lis_str_c: CTE_STR
| lis_str_c COMA CTE_STR
;                

def_var: DEFVAR lista_var ENDDEF
;

lista_var: lista_ids DOS_PUNTOS tipo PUNTO_Y_COMA
| lista_var lista_ids DOS_PUNTOS tipo PUNTO_Y_COMA
;                

lista_ids: ID
| lista_ids COMA ID
;                

tipo: FLOAT
| STRING
| POINTER
| ID
;                

ejecucion: BEGIN sentencias END
| BEGIN END
;                

sentencias: sentencia
| sentencias sentencia
;                
                
sentencia: asignacion
| condicional
| bucle
| display_command
;                

asignacion: ID OP_ASIG expresion PUNTO_Y_COMA
;

expresion: termino
| expresion OP_SUMA termino
| expresion OP_RESTA termino
;                

termino: factor
| termino OP_MUL factor
| termino OP_DIV factor
;                

factor: ID
| CTE_NUM
| PAR_ABRE expresion PAR_CIERRA
| average
;                

condicional: IF PAR_ABRE condicion PAR_CIERRA sentencias ENDIF
| IF PAR_ABRE condicion PAR_CIERRA sentencias ELSE sentencias ENDIF
;                 

condicion: comparacion
| OP_NEGACION comparacion
| comparacion AND comparacion
| comparacion OR comparacion
;                

comparacion: expresion OP_IGUAL expresion
| expresion OP_DISTINTO expresion
| expresion OP_MAYOR expresion
| expresion OP_MENOR expresion
| expresion OP_MAYOR_IGUAL expresion
| expresion OP_MENOR_IGUAL expresion 
;

bucle: REPEAT sentencias UNTIL PAR_ABRE condicion PAR_CIERRA PUNTO_Y_COMA
;

display_command: DISPLAY PAR_ABRE CTE_STR PAR_CIERRA PUNTO_Y_COMA
;

average: AVG PAR_ABRE lista_num PAR_CIERRA
;
 
%%

void yyerror(String mensaje) {
	System.out.println("Error: " + mensaje);
}

int yylex() {

	int token = 0; //por default lo ponemos en 0 para que yyparse corte si hay algun problema
	
	try {
		Automata automata = new Automata();
	 	token = automata.yylex();
	} catch (IOException e) {
		e.printStackTrace();
	}
	
 	yylval = new ParserVal(token);
	return token;
}

void dotest(String nombreArchivo) {

	ArchivoReader archivo = ArchivoReader.getInstance();
	archivo.abrirArhivo(nombreArchivo);
	yyparse();
	archivo.cerrarArhivo();
}


public static void main(String args[]) {
 	 Parser par = new Parser(false);
	 par.dotest(args[0]);
}